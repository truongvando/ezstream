# üöÄ K·∫æ HO·∫†CH THI·∫æT K·∫æ T√çNH NƒÇNG M·ªöI - EZSTREAM

## üìã T·ªîNG QUAN D·ª∞ √ÅN
Th√™m 3 t√≠nh nƒÉng ch√≠nh v√†o sidebar:
1. **Trang b√°n View** - T√≠ch h·ª£p API Just Another Panel
2. **Trang b√°n Tool** - Showcase s·∫£n ph·∫©m c√¥ng ngh·ªá  
3. **H·ªá th·ªëng License** - K√≠ch ho·∫°t b·∫£n quy·ªÅn cho Python tools

---

## üéØ T√çNH NƒÇNG 1: TRANG B√ÅN VIEW

### 1.1 Database Schema
```sql
-- B·∫£ng d·ªãch v·ª• t·ª´ API
CREATE TABLE api_services (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    service_id INT UNIQUE, -- ID t·ª´ API
    name VARCHAR(255),
    type VARCHAR(100),
    category VARCHAR(100),
    rate DECIMAL(10,2),
    min_quantity INT,
    max_quantity INT,
    refill BOOLEAN DEFAULT FALSE,
    cancel BOOLEAN DEFAULT FALSE,
    markup_percentage INT DEFAULT 20, -- +20% gi√°
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- B·∫£ng ƒë∆°n h√†ng view
CREATE TABLE view_orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    service_id BIGINT,
    api_service_id BIGINT,
    link VARCHAR(500),
    quantity INT,
    total_amount DECIMAL(10,2),
    api_order_id INT NULL, -- ID t·ª´ API
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'),
    api_response JSON NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (api_service_id) REFERENCES api_services(id)
);
```

### 1.2 Models
```php
// app/Models/ApiService.php
class ApiService extends Model
{
    protected $fillable = [
        'service_id', 'name', 'type', 'category', 'rate',
        'min_quantity', 'max_quantity', 'refill', 'cancel',
        'markup_percentage', 'is_active'
    ];

    public function getFinalPriceAttribute()
    {
        return $this->rate * (1 + $this->markup_percentage / 100);
    }
}

// app/Models/ViewOrder.php  
class ViewOrder extends Model
{
    protected $fillable = [
        'user_id', 'service_id', 'api_service_id', 'link',
        'quantity', 'total_amount', 'api_order_id', 'status'
    ];

    public function user() { return $this->belongsTo(User::class); }
    public function apiService() { return $this->belongsTo(ApiService::class); }
}
```

### 1.3 Services
```php
// app/Services/JustAnotherPanelService.php
class JustAnotherPanelService
{
    private $apiUrl = 'https://justanotherpanel.com/api/v2';
    private $apiKey;

    public function __construct()
    {
        $this->apiKey = setting('jap_api_key');
    }

    public function getServices()
    {
        $response = Http::post($this->apiUrl, [
            'key' => $this->apiKey,
            'action' => 'services'
        ]);
        
        return $response->json();
    }

    public function createOrder($data)
    {
        $response = Http::post($this->apiUrl, [
            'key' => $this->apiKey,
            'action' => 'add',
            'service' => $data['service_id'],
            'link' => $data['link'],
            'quantity' => $data['quantity']
        ]);
        
        return $response->json();
    }
}
```

### 1.4 Controllers & Livewire
```php
// app/Livewire/ViewServiceManager.php
class ViewServiceManager extends Component
{
    public $selectedService = null;
    public $link = '';
    public $quantity = 100;
    public $services = [];
    
    public function mount()
    {
        $this->loadServices();
    }
    
    public function loadServices()
    {
        $this->services = ApiService::where('is_active', true)
            ->orderBy('category')
            ->orderBy('name')
            ->get()
            ->groupBy('category');
    }
    
    public function calculatePrice()
    {
        if (!$this->selectedService) return 0;
        
        $service = ApiService::find($this->selectedService);
        return $service->final_price * $this->quantity;
    }
    
    public function placeOrder()
    {
        // Validate balance
        // Create order
        // Deduct balance
        // Call API
    }
}
```

### 1.5 Views
```blade
<!-- resources/views/livewire/view-service-manager.blade.php -->
<div class="bg-white rounded-lg shadow-lg p-6">
    <h2 class="text-2xl font-bold mb-6">üõí Mua View</h2>
    
    <!-- Service Dropdown -->
    <div class="mb-4">
        <label class="block text-sm font-medium mb-2">Ch·ªçn D·ªãch V·ª•</label>
        <select wire:model="selectedService" class="w-full border rounded-lg p-3">
            <option value="">-- Ch·ªçn d·ªãch v·ª• --</option>
            @foreach($services as $category => $categoryServices)
                <optgroup label="{{ $category }}">
                    @foreach($categoryServices as $service)
                        <option value="{{ $service->id }}">
                            {{ $service->name }} - {{ number_format($service->final_price, 2) }} USD
                        </option>
                    @endforeach
                </optgroup>
            @endforeach
        </select>
    </div>
    
    <!-- Order Form -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <label class="block text-sm font-medium mb-2">Link</label>
            <input wire:model="link" type="url" class="w-full border rounded-lg p-3" 
                   placeholder="https://example.com">
        </div>
        
        <div>
            <label class="block text-sm font-medium mb-2">S·ªë l∆∞·ª£ng</label>
            <input wire:model="quantity" type="number" class="w-full border rounded-lg p-3" 
                   min="1" max="10000">
        </div>
    </div>
    
    <!-- Price Display -->
    <div class="mt-4 p-4 bg-blue-50 rounded-lg">
        <div class="text-lg font-semibold">
            T·ªïng ti·ªÅn: ${{ number_format($this->calculatePrice(), 2) }}
        </div>
    </div>
    
    <button wire:click="placeOrder" class="mt-4 bg-blue-600 text-white px-6 py-3 rounded-lg">
        ƒê·∫∑t h√†ng
    </button>
</div>
```

---

## üõ†Ô∏è T√çNH NƒÇNG 2: TRANG B√ÅN TOOL

### 2.1 Database Schema
```sql
-- B·∫£ng s·∫£n ph·∫©m tool
CREATE TABLE tools (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    slug VARCHAR(255) UNIQUE,
    description TEXT,
    short_description VARCHAR(500),
    price DECIMAL(10,2),
    sale_price DECIMAL(10,2) NULL,
    image VARCHAR(255),
    gallery JSON NULL, -- Multiple images
    features JSON NULL, -- Feature list
    system_requirements TEXT,
    download_url VARCHAR(500),
    demo_url VARCHAR(500) NULL,
    is_active BOOLEAN DEFAULT TRUE,
    is_featured BOOLEAN DEFAULT FALSE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- B·∫£ng ƒë∆°n h√†ng tool
CREATE TABLE tool_orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    tool_id BIGINT,
    amount DECIMAL(10,2),
    status ENUM('PENDING', 'COMPLETED', 'FAILED'),
    transaction_id BIGINT NULL,
    license_key VARCHAR(255) NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (tool_id) REFERENCES tools(id),
    FOREIGN KEY (transaction_id) REFERENCES transactions(id)
);
```

### 2.2 Models
```php
// app/Models/Tool.php
class Tool extends Model
{
    protected $fillable = [
        'name', 'slug', 'description', 'short_description',
        'price', 'sale_price', 'image', 'gallery', 'features',
        'system_requirements', 'download_url', 'demo_url',
        'is_active', 'is_featured', 'sort_order'
    ];

    protected $casts = [
        'gallery' => 'array',
        'features' => 'array'
    ];

    public function getFinalPriceAttribute()
    {
        return $this->sale_price ?? $this->price;
    }

    public function getIsOnSaleAttribute()
    {
        return !is_null($this->sale_price);
    }
}

// app/Models/ToolOrder.php
class ToolOrder extends Model
{
    protected $fillable = [
        'user_id', 'tool_id', 'amount', 'status',
        'transaction_id', 'license_key'
    ];

    public function user() { return $this->belongsTo(User::class); }
    public function tool() { return $this->belongsTo(Tool::class); }
    public function transaction() { return $this->belongsTo(Transaction::class); }
}
```

### 2.3 Controllers & Livewire
```php
// app/Livewire/ToolStore.php
class ToolStore extends Component
{
    public $search = '';
    public $category = '';
    public $sortBy = 'created_at';
    public $sortDirection = 'desc';
    
    public function render()
    {
        $query = Tool::where('is_active', true);
        
        if ($this->search) {
            $query->where('name', 'like', "%{$this->search}%")
                  ->orWhere('description', 'like', "%{$this->search}%");
        }
        
        $tools = $query->orderBy($this->sortBy, $this->sortDirection)
                       ->paginate(12);
        
        return view('livewire.tool-store', compact('tools'));
    }
}

// app/Livewire/ToolDetail.php
class ToolDetail extends Component
{
    public Tool $tool;
    
    public function mount($slug)
    {
        $this->tool = Tool::where('slug', $slug)->firstOrFail();
    }
    
    public function purchase()
    {
        // Check balance
        // Create order
        // Generate license
    }
}
```

### 2.4 Views
```blade
<!-- resources/views/livewire/tool-store.blade.php -->
<div class="bg-white rounded-lg shadow-lg p-6">
    <h2 class="text-2xl font-bold mb-6">üõ†Ô∏è C·ª≠a h√†ng Tool</h2>
    
    <!-- Search & Filter -->
    <div class="mb-6 flex gap-4">
        <input wire:model.debounce.300ms="search" type="text" 
               class="flex-1 border rounded-lg p-3" placeholder="T√¨m ki·∫øm tool...">
        <select wire:model="sortBy" class="border rounded-lg p-3">
            <option value="created_at">M·ªõi nh·∫•t</option>
            <option value="price">Gi√° th·∫•p nh·∫•t</option>
            <option value="name">T√™n A-Z</option>
        </select>
    </div>
    
    <!-- Tool Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach($tools as $tool)
            <div class="border rounded-lg overflow-hidden hover:shadow-lg transition">
                <img src="{{ $tool->image }}" alt="{{ $tool->name }}" 
                     class="w-full h-48 object-cover">
                
                <div class="p-4">
                    <h3 class="text-lg font-semibold mb-2">{{ $tool->name }}</h3>
                    <p class="text-gray-600 mb-3">{{ $tool->short_description }}</p>
                    
                    <div class="flex justify-between items-center">
                        <div class="text-lg font-bold">
                            @if($tool->is_on_sale)
                                <span class="line-through text-gray-400">
                                    ${{ number_format($tool->price, 2) }}
                                </span>
                                <span class="text-red-600">
                                    ${{ number_format($tool->final_price, 2) }}
                                </span>
                            @else
                                ${{ number_format($tool->final_price, 2) }}
                            @endif
                        </div>
                        
                        <a href="{{ route('tools.show', $tool->slug) }}" 
                           class="bg-blue-600 text-white px-4 py-2 rounded-lg">
                            Chi ti·∫øt
                        </a>
                    </div>
                </div>
            </div>
        @endforeach
    </div>
    
    {{ $tools->links() }}
</div>
```

---

## üîë T√çNH NƒÇNG 3: H·ªÜ TH·ªêNG LICENSE

### 3.1 Database Schema
```sql
-- B·∫£ng license keys
CREATE TABLE licenses (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    tool_id BIGINT,
    license_key VARCHAR(255) UNIQUE,
    device_id VARCHAR(255) NULL,
    device_name VARCHAR(255) NULL,
    device_info JSON NULL,
    is_active BOOLEAN DEFAULT TRUE,
    activated_at TIMESTAMP NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (tool_id) REFERENCES tools(id)
);

-- B·∫£ng license activation logs
CREATE TABLE license_activations (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    license_id BIGINT,
    device_id VARCHAR(255),
    device_name VARCHAR(255),
    device_info JSON,
    ip_address VARCHAR(45),
    user_agent TEXT,
    activated_at TIMESTAMP,
    FOREIGN KEY (license_id) REFERENCES licenses(id)
);
```

### 3.2 Models
```php
// app/Models/License.php
class License extends Model
{
    protected $fillable = [
        'user_id', 'tool_id', 'license_key', 'device_id',
        'device_name', 'device_info', 'is_active',
        'activated_at', 'expires_at'
    ];

    protected $casts = [
        'device_info' => 'array',
        'activated_at' => 'datetime',
        'expires_at' => 'datetime'
    ];

    public function user() { return $this->belongsTo(User::class); }
    public function tool() { return $this->belongsTo(Tool::class); }
    public function activations() { return $this->hasMany(LicenseActivation::class); }

    public function generateKey()
    {
        return strtoupper(Str::random(4) . '-' . Str::random(4) . '-' . 
                          Str::random(4) . '-' . Str::random(4));
    }
}

// app/Models/LicenseActivation.php
class LicenseActivation extends Model
{
    protected $fillable = [
        'license_id', 'device_id', 'device_name', 
        'device_info', 'ip_address', 'user_agent'
    ];

    protected $casts = [
        'device_info' => 'array',
        'activated_at' => 'datetime'
    ];

    public function license() { return $this->belongsTo(License::class); }
}
```

### 3.3 API Controllers
```php
// app/Http/Controllers/Api/LicenseController.php
class LicenseController extends Controller
{
    public function verify(Request $request)
    {
        $request->validate([
            'license_key' => 'required|string',
            'device_id' => 'required|string',
            'device_name' => 'required|string',
            'device_info' => 'required|array'
        ]);

        $license = License::where('license_key', $request->license_key)
                         ->where('is_active', true)
                         ->first();

        if (!$license) {
            return response()->json([
                'success' => false,
                'message' => 'License kh√¥ng h·ª£p l·ªá'
            ], 404);
        }

        // Check if device is already activated
        $existingActivation = $license->activations()
                                    ->where('device_id', $request->device_id)
                                    ->first();

        if ($existingActivation) {
            return response()->json([
                'success' => true,
                'message' => 'Device ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t',
                'license' => [
                    'key' => $license->license_key,
                    'tool_name' => $license->tool->name,
                    'expires_at' => $license->expires_at
                ]
            ]);
        }

        // Check if user has reached device limit (1 device per license)
        if ($license->activations()->count() >= 1) {
            return response()->json([
                'success' => false,
                'message' => 'License ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t tr√™n thi·∫øt b·ªã kh√°c'
            ], 403);
        }

        // Create activation
        $license->activations()->create([
            'device_id' => $request->device_id,
            'device_name' => $request->device_name,
            'device_info' => $request->device_info,
            'ip_address' => $request->ip(),
            'user_agent' => $request->userAgent(),
            'activated_at' => now()
        ]);

        return response()->json([
            'success' => true,
            'message' => 'K√≠ch ho·∫°t th√†nh c√¥ng',
            'license' => [
                'key' => $license->license_key,
                'tool_name' => $license->tool->name,
                'expires_at' => $license->expires_at
            ]
        ]);
    }

    public function checkStatus(Request $request)
    {
        $request->validate([
            'license_key' => 'required|string',
            'device_id' => 'required|string'
        ]);

        $license = License::where('license_key', $request->license_key)
                         ->where('is_active', true)
                         ->first();

        if (!$license) {
            return response()->json(['valid' => false]);
        }

        $activation = $license->activations()
                            ->where('device_id', $request->device_id)
                            ->first();

        return response()->json([
            'valid' => !is_null($activation),
            'expires_at' => $license->expires_at
        ]);
    }
}
```

### 3.4 Livewire Components
```php
// app/Livewire/LicenseManager.php
class LicenseManager extends Component
{
    public $licenses = [];
    
    public function mount()
    {
        $this->loadLicenses();
    }
    
    public function loadLicenses()
    {
        $this->licenses = auth()->user()->licenses()
            ->with(['tool', 'activations'])
            ->get();
    }
    
    public function deactivateLicense($licenseId)
    {
        $license = License::find($licenseId);
        
        if ($license && $license->user_id === auth()->id()) {
            $license->activations()->delete();
            session()->flash('success', 'ƒê√£ h·ªßy k√≠ch ho·∫°t license');
        }
    }
}
```

### 3.5 Python Integration Guide
```python
# license_client.py
import requests
import hashlib
import platform
import uuid
import json

class LicenseClient:
    def __init__(self, api_url, license_key):
        self.api_url = api_url
        self.license_key = license_key
        self.device_id = self._generate_device_id()
        
    def _generate_device_id(self):
        """Generate unique device ID based on hardware"""
        system_info = {
            'platform': platform.system(),
            'machine': platform.machine(),
            'processor': platform.processor(),
            'node': platform.node()
        }
        
        # Create hash from system info
        device_hash = hashlib.md5(
            json.dumps(system_info, sort_keys=True).encode()
        ).hexdigest()
        
        return device_hash
    
    def verify_license(self):
        """Verify license with server"""
        try:
            response = requests.post(f"{self.api_url}/api/license/verify", json={
                'license_key': self.license_key,
                'device_id': self.device_id,
                'device_name': platform.node(),
                'device_info': {
                    'platform': platform.system(),
                    'version': platform.version(),
                    'machine': platform.machine()
                }
            })
            
            if response.status_code == 200:
                data = response.json()
                if data['success']:
                    return True, data['license']
                else:
                    return False, data['message']
            else:
                return False, "L·ªói k·∫øt n·ªëi server"
                
        except Exception as e:
            return False, f"L·ªói: {str(e)}"
    
    def check_status(self):
        """Check license status"""
        try:
            response = requests.post(f"{self.api_url}/api/license/status", json={
                'license_key': self.license_key,
                'device_id': self.device_id
            })
            
            if response.status_code == 200:
                return response.json()
            else:
                return {'valid': False}
                
        except Exception as e:
            return {'valid': False, 'error': str(e)}

# Usage example
if __name__ == "__main__":
    client = LicenseClient(
        api_url="https://your-domain.com",
        license_key="XXXX-XXXX-XXXX-XXXX"
    )
    
    # Verify license
    is_valid, result = client.verify_license()
    
    if is_valid:
        print("‚úÖ License h·ª£p l·ªá!")
        print(f"Tool: {result['tool_name']}")
        print(f"H·∫øt h·∫°n: {result['expires_at']}")
    else:
        print(f"‚ùå {result}")
```

---

## üîÑ T√çCH H·ª¢P V·ªöI H·ªÜ TH·ªêNG THANH TO√ÅN HI·ªÜN T·∫†I

### 4.1 C·∫≠p nh·∫≠t Transaction Model
```php
// app/Models/Transaction.php
class Transaction extends Model
{
    protected $fillable = [
        'user_id', 'amount', 'status', 'payment_method',
        'gateway_transaction_id', 'subscription_id',
        'tool_order_id', 'view_order_id' // Th√™m c√°c tr∆∞·ªùng m·ªõi
    ];

    public function toolOrder() { return $this->belongsTo(ToolOrder::class); }
    public function viewOrder() { return $this->belongsTo(ViewOrder::class); }
}
```

### 4.2 C·∫≠p nh·∫≠t CheckBankTransactionsJob
```php
// app/Jobs/CheckBankTransactionsJob.php
public function handle(): void
{
    // ... existing code ...
    
    foreach ($bankTransactions as $bankTx) {
        // ... existing logic ...
        
        // Check for tool orders
        $toolOrder = ToolOrder::where('status', 'PENDING')
            ->whereHas('transaction', function($q) use ($paymentCode) {
                $q->where('payment_code', $paymentCode);
            })
            ->first();
            
        if ($toolOrder) {
            $this->processToolOrder($toolOrder, $bankTx);
        }
        
        // Check for view orders  
        $viewOrder = ViewOrder::where('status', 'PENDING')
            ->whereHas('transaction', function($q) use ($paymentCode) {
                $q->where('payment_code', $paymentCode);
            })
            ->first();
            
        if ($viewOrder) {
            $this->processViewOrder($viewOrder, $bankTx);
        }
    }
}

private function processToolOrder($toolOrder, $bankTx)
{
    $toolOrder->update(['status' => 'COMPLETED']);
    
    // Generate license
    $license = License::create([
        'user_id' => $toolOrder->user_id,
        'tool_id' => $toolOrder->tool_id,
        'license_key' => (new License)->generateKey(),
        'is_active' => true,
        'expires_at' => now()->addYear() // 1 nƒÉm
    ]);
    
    $toolOrder->update(['license_key' => $license->license_key]);
}

private function processViewOrder($viewOrder, $bankTx)
{
    $viewOrder->update(['status' => 'PROCESSING']);
    
    // Call Just Another Panel API
    $japService = new JustAnotherPanelService();
    $apiResponse = $japService->createOrder([
        'service_id' => $viewOrder->apiService->service_id,
        'link' => $viewOrder->link,
        'quantity' => $viewOrder->quantity
    ]);
    
    if (isset($apiResponse['order'])) {
        $viewOrder->update([
            'status' => 'PROCESSING',
            'api_order_id' => $apiResponse['order'],
            'api_response' => $apiResponse
        ]);
    }
}
```

---

## üìÅ C·∫§U TR√öC FILE HO√ÄN CH·ªàNH

```
app/
‚îú‚îÄ‚îÄ Console/Commands/
‚îÇ   ‚îú‚îÄ‚îÄ SyncApiServicesCommand.php
‚îÇ   ‚îî‚îÄ‚îÄ ProcessViewOrdersCommand.php
‚îú‚îÄ‚îÄ Http/Controllers/
‚îÇ   ‚îú‚îÄ‚îÄ Api/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LicenseController.php
‚îÇ   ‚îú‚îÄ‚îÄ ToolController.php
‚îÇ   ‚îî‚îÄ‚îÄ ViewServiceController.php
‚îú‚îÄ‚îÄ Jobs/
‚îÇ   ‚îú‚îÄ‚îÄ SyncApiServicesJob.php
‚îÇ   ‚îî‚îÄ‚îÄ ProcessViewOrderJob.php
‚îú‚îÄ‚îÄ Livewire/
‚îÇ   ‚îú‚îÄ‚îÄ ToolStore.php
‚îÇ   ‚îú‚îÄ‚îÄ ToolDetail.php
‚îÇ   ‚îú‚îÄ‚îÄ ViewServiceManager.php
‚îÇ   ‚îú‚îÄ‚îÄ LicenseManager.php
‚îÇ   ‚îî‚îÄ‚îÄ Admin/
‚îÇ       ‚îú‚îÄ‚îÄ ToolManager.php
‚îÇ       ‚îî‚îÄ‚îÄ LicenseManager.php
‚îú‚îÄ‚îÄ Models/
‚îÇ   ‚îú‚îÄ‚îÄ ApiService.php
‚îÇ   ‚îú‚îÄ‚îÄ ViewOrder.php
‚îÇ   ‚îú‚îÄ‚îÄ Tool.php
‚îÇ   ‚îú‚îÄ‚îÄ ToolOrder.php
‚îÇ   ‚îú‚îÄ‚îÄ License.php
‚îÇ   ‚îî‚îÄ‚îÄ LicenseActivation.php
‚îú‚îÄ‚îÄ Services/
‚îÇ   ‚îú‚îÄ‚îÄ JustAnotherPanelService.php
‚îÇ   ‚îú‚îÄ‚îÄ LicenseService.php
‚îÇ   ‚îî‚îÄ‚îÄ ToolService.php
‚îî‚îÄ‚îÄ View/
    ‚îî‚îÄ‚îÄ Components/
        ‚îî‚îÄ‚îÄ Sidebar/
            ‚îú‚îÄ‚îÄ ViewServiceLink.php
            ‚îú‚îÄ‚îÄ ToolStoreLink.php
            ‚îî‚îÄ‚îÄ LicenseManagerLink.php

resources/views/
‚îú‚îÄ‚îÄ livewire/
‚îÇ   ‚îú‚îÄ‚îÄ tool-store.blade.php
‚îÇ   ‚îú‚îÄ‚îÄ tool-detail.blade.php
‚îÇ   ‚îú‚îÄ‚îÄ view-service-manager.blade.php
‚îÇ   ‚îú‚îÄ‚îÄ license-manager.blade.php
‚îÇ   ‚îî‚îÄ‚îÄ admin/
‚îÇ       ‚îú‚îÄ‚îÄ tool-manager.blade.php
‚îÇ       ‚îî‚îÄ‚îÄ license-manager.blade.php
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ sidebar/
        ‚îú‚îÄ‚îÄ view-service-link.blade.php
        ‚îú‚îÄ‚îÄ tool-store-link.blade.php
        ‚îî‚îÄ‚îÄ license-manager-link.blade.php

database/migrations/
‚îú‚îÄ‚îÄ create_api_services_table.php
‚îú‚îÄ‚îÄ create_view_orders_table.php
‚îú‚îÄ‚îÄ create_tools_table.php
‚îú‚îÄ‚îÄ create_tool_orders_table.php
‚îú‚îÄ‚îÄ create_licenses_table.php
‚îî‚îÄ‚îÄ create_license_activations_table.php
```

---

## üöÄ L·ªò TR√åNH TRI·ªÇN KHAI

### Phase 1: C∆° s·ªü d·ªØ li·ªáu (1-2 ng√†y)
- [ ] T·∫°o migrations cho t·∫•t c·∫£ b·∫£ng
- [ ] T·∫°o models v·ªõi relationships
- [ ] T·∫°o seeders cho d·ªØ li·ªáu m·∫´u

### Phase 2: API Integration (2-3 ng√†y)
- [ ] T√≠ch h·ª£p Just Another Panel API
- [ ] T·∫°o service classes
- [ ] T·∫°o commands ƒë·ªÉ sync services

### Phase 3: Frontend Development (3-4 ng√†y)
- [ ] T·∫°o Livewire components
- [ ] Thi·∫øt k·∫ø UI/UX cho c√°c trang
- [ ] T√≠ch h·ª£p v·ªõi sidebar

### Phase 4: License System (2-3 ng√†y)
- [ ] T·∫°o API endpoints
- [ ] Vi·∫øt Python client
- [ ] T·∫°o h∆∞·ªõng d·∫´n t√≠ch h·ª£p

### Phase 5: Testing & Optimization (1-2 ng√†y)
- [ ] Test t·∫•t c·∫£ t√≠nh nƒÉng
- [ ] Optimize performance
- [ ] Fix bugs

---

## üí° T√çNH NƒÇNG B·ªî SUNG

### 5.1 Admin Panel
- Qu·∫£n l√Ω tools (CRUD)
- Qu·∫£n l√Ω licenses
- Xem th·ªëng k√™ b√°n h√†ng
- Qu·∫£n l√Ω API services

### 5.2 User Dashboard
- L·ªãch s·ª≠ mua h√†ng
- Qu·∫£n l√Ω licenses
- Theo d√µi view orders
- Download tools

### 5.3 Notifications
- Email th√¥ng b√°o khi mua th√†nh c√¥ng
- Th√¥ng b√°o license s·∫Øp h·∫øt h·∫°n
- Th√¥ng b√°o view order ho√†n th√†nh

### 5.4 Analytics
- Th·ªëng k√™ doanh thu
- B√°o c√°o b√°n h√†ng
- Theo d√µi license activations

---

## üéØ K·∫æT LU·∫¨N

Thi·∫øt k·∫ø n√†y cung c·∫•p m·ªôt h·ªá th·ªëng ho√†n ch·ªânh v·ªõi:
- ‚úÖ T√≠ch h·ª£p API b√™n th·ª© 3
- ‚úÖ H·ªá th·ªëng thanh to√°n th·ªëng nh·∫•t
- ‚úÖ License management chuy√™n nghi·ªáp
- ‚úÖ UI/UX hi·ªán ƒë·∫°i
- ‚úÖ Scalable architecture
- ‚úÖ Security best practices

T·∫•t c·∫£ t√≠nh nƒÉng ƒë·ªÅu t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng hi·ªán t·∫°i v√† c√≥ th·ªÉ m·ªü r·ªông d·ªÖ d√†ng trong t∆∞∆°ng lai. 